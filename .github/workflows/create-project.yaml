name: Create Project and Deploy

on:
  push:
    branches: [master]
    paths: ['projectsGenerateJson/project.json']

jobs:
  build-and-deploy:
    runs-on: self-hosted
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up virtual environment and install dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install cookiecutter jq
          
          # Virtual environment'ın aktif olduğunu doğrula
          which cookiecutter
          which python

      - name: Process JSON file and create projects
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_OWNER: "dogukan1047"
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          source venv/bin/activate
          JSON_FILE="projectsGenerateJson/project.json"

          if [ ! -f "$JSON_FILE" ]; then
            echo "Error: $JSON_FILE not found"
            exit 1
          fi

          echo "Processing $JSON_FILE"

          PROJECT_COUNT=$(jq length "$JSON_FILE")

          for ((i=0; i<$PROJECT_COUNT; i++)); do
            echo "-----------------------------------------------------"
            echo "Processing project index $i"
            
            # Virtual environment'ı tekrar aktif et (her iterasyonda)
            source venv/bin/activate

            PROJECT_NAME=$(jq -r ".[$i].project_name" "$JSON_FILE")
            DESCRIPTION=$(jq -r ".[$i].description" "$JSON_FILE")
            AUTHOR=$(jq -r ".[$i].author" "$JSON_FILE")
            PROJECT_TYPE=$(jq -r ".[$i].project_type" "$JSON_FILE")
            DOCKER_REGISTRY=$(jq -r ".[$i].docker_registry" "$JSON_FILE")
            BASE_IMAGE_TYPE=$(jq -r ".[$i].base_image_type" "$JSON_FILE")
            USE_GPU=$(jq -r ".[$i].use_gpu" "$JSON_FILE")
            GPU_COUNT=$(jq -r ".[$i].gpu_count" "$JSON_FILE")
            MLFLOW_ENABLED=$(jq -r ".[$i].mlflow_enabled" "$JSON_FILE")
            DEPLOY_ENABLED=$(jq -r ".[$i].deploy_enabled" "$JSON_FILE")
            CPU_LIMIT=$(jq -r ".[$i].cpu_limit" "$JSON_FILE")
            CPU_REQUEST=$(jq -r ".[$i].cpu_request" "$JSON_FILE")
            MEMORY_LIMIT=$(jq -r ".[$i].memory_limit" "$JSON_FILE")
            MEMORY_REQUEST=$(jq -r ".[$i].memory_request" "$JSON_FILE")
            STORAGE_SIZE=$(jq -r ".[$i].storage_size" "$JSON_FILE")

            if [ -z "$PROJECT_NAME" ]; then
              echo "Error: PROJECT_NAME is empty for project index $i. Skipping."
              continue
            fi
            
            echo "Project configuration:"
            echo "  - PROJECT_NAME: $PROJECT_NAME"
            echo "  - DEPLOY_ENABLED: $DEPLOY_ENABLED"
            echo "  - USE_GPU: $USE_GPU"
            echo "  - GPU_COUNT: $GPU_COUNT"

            echo "Checking if repository '$GH_OWNER/$PROJECT_NAME' already exists..."
            if gh repo view "$GH_OWNER/$PROJECT_NAME" > /dev/null 2>&1; then
              echo "Repository '$GH_OWNER/$PROJECT_NAME' already exists. Skipping this project."
              continue
            fi
            echo "Repository does not exist. Proceeding with creation."

            case "$PROJECT_TYPE" in
              "llm") TEMPLATE="https://github.com/dogukan1047/llm-boilerplate.git";;
              "ml") TEMPLATE="https://github.com/dogukan1047/ml-boilerplate.git";;
              "custom") TEMPLATE="https://github.com/dogukan1047/custom-boilerplate.git";;
              *) echo "Error: Invalid project_type '$PROJECT_TYPE' for project index $i. Skipping."; continue;;
            esac

            # Cookiecutter ile proje oluştur
            cookiecutter --no-input "$TEMPLATE" \
              project_name="$PROJECT_NAME" \
              description="$DESCRIPTION" \
              author="$AUTHOR" \
              docker_registry="$DOCKER_REGISTRY" \
              base_image_type="$BASE_IMAGE_TYPE" \
              use_gpu="$USE_GPU" \
              gpu_count="$GPU_COUNT" \
              mlflow_enabled="$MLFLOW_ENABLED" \
              deploy_enabled="$DEPLOY_ENABLED" \
              cpu_limit="$CPU_LIMIT" \
              cpu_request="$CPU_REQUEST" \
              memory_limit="$MEMORY_LIMIT" \
              memory_request="$MEMORY_REQUEST" \
              storage_size="$STORAGE_SIZE"

            PROJECT_SLUG=$(find . -maxdepth 1 -type d -newer "$JSON_FILE" ! -name "." ! -name ".." ! -name ".git" ! -name "projects" ! -name "venv" ! -name ".*" -print -quit | sed 's|^\./||')

            if [ -z "$PROJECT_SLUG" ]; then
              echo "Error: Could not find generated project directory for project $PROJECT_NAME"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi
            echo "Generated project directory: '$PROJECT_SLUG'"
            
            # PROJECT_SLUG'ın gerçekten bir dizin olduğunu doğrula
            if [ ! -d "$PROJECT_SLUG" ]; then
              echo "Error: $PROJECT_SLUG is not a directory"
              exit 1
            fi

            # Yeni repo oluştur
            gh repo create "$PROJECT_NAME" --public --description "$DESCRIPTION"

            # Dosyaları push et
            cd "$PROJECT_SLUG" || { echo "Error: Directory $PROJECT_SLUG not found"; exit 1; }
            git init -b main
            git add .
            git commit -m "Initial commit from boilerplate"
            git remote add origin "https://x-access-token:${GH_TOKEN}@github.com/${GH_OWNER}/$PROJECT_NAME.git"
            git push -u origin main

            # Deployment adımı (dizin silinmeden ÖNCE)
            if [ "$DEPLOY_ENABLED" == "true" ]; then
              echo "Deploying project $PROJECT_NAME to Kubernetes..."
              
              # Kubeconfig ayarla
              echo "$KUBECONFIG" | base64 -d > ../kubeconfig.yaml
              export KUBECONFIG=../kubeconfig.yaml

              # Kustomize ile YAML'ları oluştur ve apply et
              if [ -d "kustomize" ]; then
                cd kustomize || { echo "Error: Cannot enter kustomize directory"; exit 1; }
                kustomize build . | kubectl apply -f -
                cd ..
                echo "Deployment completed for $PROJECT_NAME"
              else
                echo "Warning: kustomize directory not found in $PROJECT_SLUG"
              fi
            else
              echo "Deployment skipped for $PROJECT_NAME (deploy_enabled is false)"
            fi
          
            cd ..

            # Proje dizinini temizle (deployment'tan SONRA sil)
            rm -rf "$PROJECT_SLUG"

            # Kubeconfig dosyasını temizle
            rm -f kubeconfig.yaml

            echo "Successfully created project: $PROJECT_NAME"
          done

          echo "-----------------------------------------------------"
          echo "Finished processing all projects in $JSON_FILE"
