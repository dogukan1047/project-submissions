name: Create Project from JSON
on:
  push:
    branches: [master]
    paths: ['projects/project.json']  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install cookiecutter jq
      
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions Bot"
      
      - name: Process JSON file
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          JSON_FILE="projects/projects.json"
          
          if [ ! -f "$JSON_FILE" ]; then
            echo "Error: $JSON_FILE not found"
            exit 1
          fi
          
          echo "Processing $JSON_FILE"
          
          # Get the number of projects in the JSON array
          PROJECT_COUNT=$(jq '. | length' "$JSON_FILE")
          
          # Loop through each project in the JSON array
          for ((i=0; i<$PROJECT_COUNT; i++)); do
            echo "Processing project $((i+1))"
            
            # Read variables from JSON array element
            PROJECT_NAME=$(jq -r ".[$i].project_name" "$JSON_FILE")
            DESCRIPTION=$(jq -r ".[$i].description" "$JSON_FILE")
            AUTHOR=$(jq -r ".[$i].author" "$JSON_FILE")
            PROJECT_TYPE=$(jq -r ".[$i].project_type" "$JSON_FILE")
            
            # Error checking
            if [ -z "$PROJECT_NAME" ]; then
              echo "Error: PROJECT_NAME is empty for project index $i"
              exit 1
            fi
            
            # Select template
            case "$PROJECT_TYPE" in
              "llm") TEMPLATE="https://github.com/dogukan1047/llm-boilerplate.git";;
              "ml") TEMPLATE="https://github.com/dogukan1047/ml-boilerplate.git";;
              "custom") TEMPLATE="https://github.com/dogukan1047/custom-boilerplate.git";;
              *) echo "Error: Invalid project_type '$PROJECT_TYPE' for project index $i"; exit 1;;
            esac
            
            # Generate project with Cookiecutter
            cookiecutter --no-input "$TEMPLATE" project_name="$PROJECT_NAME" description="$DESCRIPTION" author="$AUTHOR"
            
            # Find the actual directory that was created
            PROJECT_SLUG=$(find . -maxdepth 1 -type d -newer "$JSON_FILE" ! -name "." ! -name ".." ! -name ".git" ! -name "projects" -print -quit | sed 's|^\./||')
            
            if [ -z "$PROJECT_SLUG" ]; then
              echo "Error: Could not find generated project directory for project $PROJECT_NAME"
              echo "Listing current directory contents:"
              ls -la
              exit 1
            fi
            
            echo "Found generated project directory: '$PROJECT_SLUG'"
            echo "Contents:"
            ls -R "$PROJECT_SLUG"
            
            # Create GitHub repository with original name
            gh repo create "$PROJECT_NAME" --public --description "$DESCRIPTION"
            
            # Push files
            cd "$PROJECT_SLUG" || { echo "Error: Directory $PROJECT_SLUG not found"; exit 1; }
            git init -b main
            git add .
            git commit -m "Initial commit from boilerplate"
            git remote add origin "https://x-access-token:${GH_TOKEN}@github.com/dogukan1047/$PROJECT_NAME.git"
            git push -u origin main
            
            # Return to main directory
            cd ..
            
            # Clean up generated directory for next iteration
            rm -rf "$PROJECT_SLUG"
            
            echo "Successfully processed project $PROJECT_NAME"
          done
          echo "Finished processing $JSON_FILE"
